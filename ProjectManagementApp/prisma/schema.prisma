// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id Int @id @default(autoincrement())
    name String
    email String @unique
    password String
    emailVerifiedAt DateTime?
    image String?
    role String @default("EMPLOYEE")
    accounts      Account[]
    sessions      Session[]
    projects  UserProject[]
    tasks Task[]
}

model Task {
    id Int @id @default(autoincrement())
    title String
    description String?
    deadline String?
    priority String? @default("LOW")
    userId Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    projectId Int
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    status String @default("TODO")
    tag String?
}

model Project {
    id Int @id @default(autoincrement())
    name String
    description String?
    tasks Task[]
    users UserProject[]
}

model UserProject {
    id Int @id @default(autoincrement())
    userId Int
    projectId Int
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, projectId])
}

// Necessary for Next auth
model Account {
    id                       Int    @id @default(autoincrement())
    userId                   Int
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               DateTime?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int   @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier Int @id @default(autoincrement())
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
